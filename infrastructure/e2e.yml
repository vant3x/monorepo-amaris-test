AWSTemplateFormatVersion: '2010-09-09'
Description: 'DynamoDB tables, Frontend, and Backend deployment'

Resources:

  # S3 Bucket for Frontend
  FrontendBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub '${AWS::StackName}-frontend'
      AccessControl: PublicRead
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: error.html

  # CloudFront Distribution for Frontend
  FrontendCloudFront:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        DefaultRootObject: index.html
        Enabled: true
        HttpVersion: http2
        Origins:
          - DomainName: !GetAtt FrontendBucket.RegionalDomainName
            Id: S3Origin
            S3OriginConfig: {}
        DefaultCacheBehavior:
          ForwardedValues:
            QueryString: false
          TargetOriginId: S3Origin
          ViewerProtocolPolicy: redirect-to-https

  # ECS Cluster for Backend
  BackendCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub '${AWS::StackName}-backend-cluster'

  # ECS Task Definition for Backend
  BackendTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Sub '${AWS::StackName}-backend-task'
      ContainerDefinitions:
        - Name: backend
          Image: your-backend-image:latest
          PortMappings:
            - ContainerPort: 8000
      RequiresCompatibilities:
        - FARGATE
      NetworkMode: awsvpc
      Cpu: '256'
      Memory: '512'

  # ECS Service for Backend
  BackendService:
    Type: AWS::ECS::Service
    Properties:
      ServiceName: !Sub '${AWS::StackName}-backend-service'
      Cluster: !Ref BackendCluster
      TaskDefinition: !Ref BackendTaskDefinition
      DesiredCount: 1
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          Subnets:
            - !Ref PublicSubnet1
            - !Ref PublicSubnet2

  # Add VPC, Subnets, Security Groups, etc. as needed

  # Lambda function to populate Funds table
  PopulateFundsFunction:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        ZipFile: |
          import boto3
          import cfnresponse
          
          def handler(event, context):
            if event['RequestType'] == 'Create':
              dynamodb = boto3.resource('dynamodb')
              table = dynamodb.Table('Funds')
              
              items = [
                {'id': '1', 'name': 'FPV_BTG_PACTUAL_RECAUDADORA', 'minimumAmount': 75000, 'category': 'FPV'},
                {'id': '2', 'name': 'FPV_BTG_PACTUAL_ECOPETROL', 'minimumAmount': 125000, 'category': 'FPV'},
                {'id': '3', 'name': 'DEUDAPRIVADA', 'minimumAmount': 50000, 'category': 'FIC'},
                {'id': '4', 'name': 'FDO-ACCIONES', 'minimumAmount': 250000, 'category': 'FIC'},
                {'id': '5', 'name': 'FPV_BTG_PACTUAL_DINAMICA', 'minimumAmount': 100000, 'category': 'FPV'}
              ]
              
              with table.batch_writer() as batch:
                for item in items:
                  batch.put_item(Item=item)
            
            cfnresponse.send(event, context, cfnresponse.SUCCESS, {})
      Runtime: python3.8
      Timeout: 60

  # IAM Role for Lambda
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: DynamoDBAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:PutItem
                  - dynamodb:BatchWriteItem
                Resource: !GetAtt FundsTable.Arn

  # Custom resource to trigger Lambda function
  PopulateFundsCustomResource:
    Type: Custom::PopulateFunds
    Properties:
      ServiceToken: !GetAtt PopulateFundsFunction.Arn
    DependsOn: FundsTable

Outputs:
  # Existing outputs...

  FrontendURL:
    Description: 'URL of the frontend'
    Value: !GetAtt FrontendCloudFront.DomainName

  BackendServiceName:
    Description: 'Name of the backend ECS service'
    Value: !Ref BackendService