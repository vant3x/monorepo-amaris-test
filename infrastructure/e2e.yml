AWSTemplateFormatVersion: '2010-09-09'
Description: 'Despliegue full stack con frontend Angular, backend FastAPI y DynamoDB'

Parameters:
  AwsAccessKeyId:
    Type: String
    NoEcho: true
  AwsSecretAccessKey:
    Type: String
    NoEcho: true
  TwilioAccountSid:
    Type: String
    NoEcho: true
  TwilioAuthToken:
    Type: String
    NoEcho: true
  TwilioPhoneNumber:
    Type: String

Resources:
  # Tablas DynamoDB
  FundsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub funds
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST

  SubscriptionsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: subscriptions
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
        - AttributeName: user_id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: UserIdIndex
          KeySchema:
            - AttributeName: user_id
              KeyType: HASH
          Projection:
            ProjectionType: ALL
      BillingMode: PAY_PER_REQUEST

  TransactionsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: transactions
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
        - AttributeName: user_id
          AttributeType: S
        - AttributeName: created_at
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: UserIdCreatedAtIndex
          KeySchema:
            - AttributeName: user_id
              KeyType: HASH
            - AttributeName: created_at
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
      BillingMode: PAY_PER_REQUEST

  # Bucket S3 para el frontend
  FrontendBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub ${AWS::StackName}-frontend
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: index.html

  FrontendBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref FrontendBucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              CanonicalUser: !GetAtt CloudFrontOriginAccessIdentity.S3CanonicalUserId
            Action: 's3:GetObject'
            Resource: !Sub ${FrontendBucket.Arn}/*

  # Repositorio ECR para el backend
  BackendRepository:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: !Sub ${AWS::StackName}-backend

  # Cluster ECS para el backend
  EcsCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub ${AWS::StackName}-cluster

  # Definición de tarea para el backend
  BackendTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Sub ${AWS::StackName}-backend
      Cpu: '256'
      Memory: '512'
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      ExecutionRoleArn: !Ref EcsExecutionRole
      TaskRoleArn: !Ref EcsTaskRole
      ContainerDefinitions:
        - Name: backend
          Image: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${BackendRepository}:latest
          PortMappings:
            - ContainerPort: 8000
          Environment:
            - Name: AWS_ACCESS_KEY_ID
              Value: !Ref AwsAccessKeyId
            - Name: AWS_SECRET_ACCESS_KEY
              Value: !Ref AwsSecretAccessKey
            - Name: AWS_REGION
              Value: !Ref AWS::Region
            - Name: TWILIO_ACCOUNT_SID
              Value: !Ref TwilioAccountSid
            - Name: TWILIO_AUTH_TOKEN
              Value: !Ref TwilioAuthToken
            - Name: TWILIO_PHONE_NUMBER
              Value: !Ref TwilioPhoneNumber
            - Name: FRONTEND_URL
              Value: !Sub https://${CloudFrontDistribution.DomainName}

  # Servicio ECS para el backend
  BackendService:
    Type: AWS::ECS::Service
    Properties:
      ServiceName: !Sub ${AWS::StackName}-backend-service
      Cluster: !Ref EcsCluster
      TaskDefinition: !Ref BackendTaskDefinition
      DesiredCount: 1
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          Subnets:
            - !Ref PublicSubnet1
            - !Ref PublicSubnet2
          SecurityGroups:
            - !Ref BackendSecurityGroup
      LoadBalancers:
        - ContainerName: backend
          ContainerPort: 8000
          TargetGroupArn: !Ref BackendTargetGroup

  # Balanceador de carga para el backend
  BackendLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internet-facing
      LoadBalancerAttributes:
        - Key: idle_timeout.timeout_seconds
          Value: '60'
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      SecurityGroups:
        - !Ref BackendSecurityGroup

  BackendTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckPath: /health
      Name: !Sub ${AWS::StackName}-backend-tg
      Port: 8000
      Protocol: HTTP
      TargetType: ip
      VpcId: !Ref VPC

  BackendListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - TargetGroupArn: !Ref BackendTargetGroup
          Type: forward
      LoadBalancerArn: !Ref BackendLoadBalancer
      Port: 80
      Protocol: HTTP

  # Distribución CloudFront para el frontend
  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        DefaultCacheBehavior:
          ViewerProtocolPolicy: redirect-to-https
          TargetOriginId: S3Origin
          DefaultTTL: 0
          MinTTL: 0
          MaxTTL: 0
          ForwardedValues:
            QueryString: false
        Enabled: true
        HttpVersion: http2
        Origins:
          - DomainName: !GetAtt FrontendBucket.RegionalDomainName
            Id: S3Origin
            S3OriginConfig:
              OriginAccessIdentity: !Sub origin-access-identity/cloudfront/${CloudFrontOriginAccessIdentity}
          - Id: ALBOrigin
            DomainName: !GetAtt BackendLoadBalancer.DNSName
            CustomOriginConfig:
              HTTPPort: 80
              HTTPSPort: 443
              OriginProtocolPolicy: http-only
        CacheBehaviors:
          - PathPattern: /api/*
            TargetOriginId: ALBOrigin
            ViewerProtocolPolicy: redirect-to-https
            AllowedMethods:
              - DELETE
              - GET
              - HEAD
              - OPTIONS
              - PATCH
              - POST
              - PUT
            ForwardedValues:
              QueryString: true
              Headers:
                - Authorization

  CloudFrontOriginAccessIdentity:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: !Sub ${AWS::StackName} OAI

  # Roles y políticas
  EcsExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy

  EcsTaskRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: 'sts:AssumeRole'
      Policies:
        - PolicyName: DynamoDBAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'dynamodb:*'
                Resource: '*'
        - PolicyName: ECRAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'ecr:GetAuthorizationToken'
                  - 'ecr:BatchCheckLayerAvailability'
                  - 'ecr:GetDownloadUrlForLayer'
                  - 'ecr:BatchGetImage'
                Resource: '*'

  # VPC y subredes
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true

  InternetGateway:
    Type: AWS::EC2::InternetGateway

  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [0, !GetAZs '']
      CidrBlock: 10.0.1.0/24
      MapPublicIpOnLaunch: true

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [1, !GetAZs '']
      CidrBlock: 10.0.2.0/24
      MapPublicIpOnLaunch: true

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC

  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: VPCGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable

  # Grupo de seguridad para el backend
  BackendSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Grupo de seguridad para el servicio backend
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 8000
          ToPort: 8000
          CidrIp: 0.0.0.0/0

  # Función Lambda para poblar la tabla Funds
  PopulateFundsTableFunction:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        ZipFile: |
          import boto3
          import cfnresponse
          import uuid

          def handler(event, context):
            if event['RequestType'] == 'Create':
              dynamodb = boto3.resource('dynamodb')
              table = dynamodb.Table(event['ResourceProperties']['TableName'])
              
              items = [
                {'name': 'FPV_BTG_PACTUAL_RECAUDADORA', 'minimum_amount': 75000, 'category': 'FPV'},
                {'name': 'FPV_BTG_PACTUAL_ECOPETROL', 'minimum_amount': 125000, 'category': 'FPV'},
                {'name': 'DEUDAPRIVADA', 'minimum_amount': 50000, 'category': 'FIC'},
                {'name': 'FDO-ACCIONES', 'minimum_amount': 250000, 'category': 'FIC'},
                {'name': 'FPV_BTG_PACTUAL_DINAMICA', 'minimum_amount': 100000, 'category': 'FPV'}
              ]
              
              with table.batch_writer() as batch:
                for item in items:
                  item['id'] = str(uuid.uuid4())
                  batch.put_item(Item=item)
            
            cfnresponse.send(event, context, cfnresponse.SUCCESS, {})

      Runtime: python3.8
      Timeout: 60

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: DynamoDBAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Effect: Allow
              Action:
              - dynamodb:PutItem
              - dynamodb:BatchWriteItem
              Resource: !GetAtt FundsTable.Arn

  PopulateFundsTable:
    Type: Custom::PopulateFundsTable
    Properties:
      ServiceToken: !GetAtt PopulateFundsTableFunction.Arn
      TableName: !Ref FundsTable

Outputs:
  FrontendUrl:
    Description: URL del sitio web frontend
    Value: !Sub https://${CloudFrontDistribution.DomainName}
  BackendUrl:
    Description: URL del servicio backend
    Value: !Sub http://${BackendLoadBalancer.DNSName}
  FundsTableName:
    Description: Nombre de la tabla Funds en DynamoDB
    Value: !Ref FundsTable
  SubscriptionsTableName:
    Description: Nombre de la tabla Subscriptions en DynamoDB
    Value: !Ref SubscriptionsTable
  TransactionsTableName:
    Description: Nombre de la tabla Transactions en DynamoDB
    Value: !Ref TransactionsTable